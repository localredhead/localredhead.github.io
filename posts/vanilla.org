#+title: 10 reasons why vanilla is the best flavor
#+date: <2020-10-13>
#+keywords: draft
#+exclude_tags: noexport
#+setupfile: ../org-templates/post.org

* Vanilla is the best flavor
:PROPERTIES:
:ID:       23cd0f79-04c7-4819-993e-a50193b1e3c6
:PUBDATE:  <2020-10-04 Sun 18:48>
:END:
** Tldr; There aren't 10 reasons.
:PROPERTIES:
:ID:       f879276d-bab5-4872-9761-1271e3f3af44
:END:
Use the defaults to their fullest.

** Design intent
:PROPERTIES:
:ID:       c2e6d091-b502-4aba-8275-2d1a5a0064a0
:END:
As with vanilla as a flavor, design intent is often overlooked or taken for granted.  Even though it touches nearly every piece of a product from ideation to creation.

Architecture?

Design.

Writing?

Design.

Branding, Marketing?

DESIGN!

In software, there's design (and turtles) all the way down and that's where I'll be writing from.
** Changing the defaults
:PROPERTIES:
:ID:       8d2db6fd-73d3-40af-b142-e700c9d9f8f5
:END:
Why do people see it upon themselves to subvert the intent of a designer by customizing the experience to their own desires?

#+BEGIN_EXPORT html
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Always be tuning</p>&mdash; Levi Strope (@localredhead) <a href="https://twitter.com/localredhead/status/1316365104385077248?ref_src=twsrc%5Etfw">October 14, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
#+END_EXPORT

*** Exactly.
:PROPERTIES:
:ID:       46c0857e-ed64-473d-9afb-bc30980444cb
:END:

It's not always bad design.

As a tinkerer myself I think it's an inherent need to always be tuning.  By allowing myself to think this way it's possible to dilute the intent of the designer.  Someone who thought about the problem space I'm stepping on at a deeper level.

A good example is personal computing. It could be as simple as changing the desktop(linux), adding custom widgets, etc.  In my experience these are cute and make me feel cool, but usually "cute" slows things down over time.
** Entropy
:PROPERTIES:
:ID:       2a03d573-e9a2-4c2e-8dba-473f22b26c69
:END:
Eventually these modifications accumulate and diminish the designed experience.  Or dilute the flavor, if you're still following the analogy from before.

In my case, I find myself maintaining a lot of extra things that don't come packaged by default.  I may not be aware that suitable defaults exist!

#+BEGIN_QUOTE
Settle into my ways of working smarter, not harder.
#+END_QUOTE

I've had a mentor or three say this to me over the years.  Stubborn is one adjective I can safely brandish.  Hopefully this post will serve as a reminder to my future self that sticking with the defaults may indeed be the smarter option.
** Beat Entropy
:PROPERTIES:
:ID:       452dd5a1-0ee8-4e3a-8153-9ab960587ee3
:END:
The way to beat entropy is to not contribute to it in this case.

Sticking with the defaults and being sure to utilize them to their fullest is the best for 90% of situations.

Most times following the path that was already paved is the pragmatic choice to save time, energy and maximize productivity.
** Is this a case for mediocraty?
:PROPERTIES:
:ID:       77303937-211b-4fce-bd76-697cfa213b4d
:END:
It could be.  In some cases the grass is greener.  But don't simply assume it is before checking first and be mindful how much time you spend "checking" ;)

What are the trade-offs?
** It's a case for keeping it simple.
:PROPERTIES:
:ID:       896b050b-98c1-4dd0-912c-594da9b50817
:END:
The tinkerer's out there will think this frame of thought is boring.  There is a lot to learn when diverging away from the intent of the design.  **Diverging** is healthy, at times.  I learn a lot when I do but the purpose of this learning should be to **converge** and apply those lessons.  If what I'm learning isn't moving the needle I try to consider if there may be more productive ways to spend time.  I only have so much to give.

As with anything, strict dogma to any one frame of thought would be unhealthy so I allow my self the freedom to geek out and explore once in a while, but considerably less than my younger years.

I'm applying my lessons learned, and converging back to _simplicity_.
